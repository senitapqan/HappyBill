// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	dtos "happyBill/dtos"
	models "happyBill/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// CreateBillboard mocks base method.
func (m *MockService) CreateBillboard(product models.Product) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBillboard", product)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBillboard indicates an expected call of CreateBillboard.
func (mr *MockServiceMockRecorder) CreateBillboard(product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBillboard", reflect.TypeOf((*MockService)(nil).CreateBillboard), product)
}

// CreateClient mocks base method.
func (m *MockService) CreateClient(client models.User) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClient", client)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateClient indicates an expected call of CreateClient.
func (mr *MockServiceMockRecorder) CreateClient(client interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClient", reflect.TypeOf((*MockService)(nil).CreateClient), client)
}

// CreateManager mocks base method.
func (m *MockService) CreateManager(manager models.User) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateManager", manager)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateManager indicates an expected call of CreateManager.
func (mr *MockServiceMockRecorder) CreateManager(manager interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateManager", reflect.TypeOf((*MockService)(nil).CreateManager), manager)
}

// CreateOrder mocks base method.
func (m *MockService) CreateOrder(id int, order models.Order) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", id, order)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockServiceMockRecorder) CreateOrder(id, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockService)(nil).CreateOrder), id, order)
}

// DeleteBillboard mocks base method.
func (m *MockService) DeleteBillboard(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBillboard", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBillboard indicates an expected call of DeleteBillboard.
func (mr *MockServiceMockRecorder) DeleteBillboard(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBillboard", reflect.TypeOf((*MockService)(nil).DeleteBillboard), id)
}

// GenerateToken mocks base method.
func (m *MockService) GenerateToken(username, password string) ([]models.RolesHeaders, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken", username, password)
	ret0, _ := ret[0].([]models.RolesHeaders)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MockServiceMockRecorder) GenerateToken(username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MockService)(nil).GenerateToken), username, password)
}

// GetAllBillboards mocks base method.
func (m *MockService) GetAllBillboards(page int) ([]dtos.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllBillboards", page)
	ret0, _ := ret[0].([]dtos.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllBillboards indicates an expected call of GetAllBillboards.
func (mr *MockServiceMockRecorder) GetAllBillboards(page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllBillboards", reflect.TypeOf((*MockService)(nil).GetAllBillboards), page)
}

// GetAllManagers mocks base method.
func (m *MockService) GetAllManagers(page int) ([]dtos.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllManagers", page)
	ret0, _ := ret[0].([]dtos.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllManagers indicates an expected call of GetAllManagers.
func (mr *MockServiceMockRecorder) GetAllManagers(page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllManagers", reflect.TypeOf((*MockService)(nil).GetAllManagers), page)
}

// GetAllOrders mocks base method.
func (m *MockService) GetAllOrders(page int) ([]dtos.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllOrders", page)
	ret0, _ := ret[0].([]dtos.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllOrders indicates an expected call of GetAllOrders.
func (mr *MockServiceMockRecorder) GetAllOrders(page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllOrders", reflect.TypeOf((*MockService)(nil).GetAllOrders), page)
}

// GetBillboardById mocks base method.
func (m *MockService) GetBillboardById(id int) (dtos.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBillboardById", id)
	ret0, _ := ret[0].(dtos.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBillboardById indicates an expected call of GetBillboardById.
func (mr *MockServiceMockRecorder) GetBillboardById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBillboardById", reflect.TypeOf((*MockService)(nil).GetBillboardById), id)
}

// GetClientById mocks base method.
func (m *MockService) GetClientById(id int) (dtos.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientById", id)
	ret0, _ := ret[0].(dtos.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientById indicates an expected call of GetClientById.
func (mr *MockServiceMockRecorder) GetClientById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientById", reflect.TypeOf((*MockService)(nil).GetClientById), id)
}

// GetClientByUserId mocks base method.
func (m *MockService) GetClientByUserId(id int) (dtos.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientByUserId", id)
	ret0, _ := ret[0].(dtos.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClientByUserId indicates an expected call of GetClientByUserId.
func (mr *MockServiceMockRecorder) GetClientByUserId(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientByUserId", reflect.TypeOf((*MockService)(nil).GetClientByUserId), id)
}

// GetManagerById mocks base method.
func (m *MockService) GetManagerById(id int) (dtos.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetManagerById", id)
	ret0, _ := ret[0].(dtos.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetManagerById indicates an expected call of GetManagerById.
func (mr *MockServiceMockRecorder) GetManagerById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetManagerById", reflect.TypeOf((*MockService)(nil).GetManagerById), id)
}

// GetMyBillboards mocks base method.
func (m *MockService) GetMyBillboards(id, page int) ([]dtos.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMyBillboards", id, page)
	ret0, _ := ret[0].([]dtos.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMyBillboards indicates an expected call of GetMyBillboards.
func (mr *MockServiceMockRecorder) GetMyBillboards(id, page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMyBillboards", reflect.TypeOf((*MockService)(nil).GetMyBillboards), id, page)
}

// GetMyOrders mocks base method.
func (m *MockService) GetMyOrders(clientId, page int, status string) ([]dtos.MyOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMyOrders", clientId, page, status)
	ret0, _ := ret[0].([]dtos.MyOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMyOrders indicates an expected call of GetMyOrders.
func (mr *MockServiceMockRecorder) GetMyOrders(clientId, page, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMyOrders", reflect.TypeOf((*MockService)(nil).GetMyOrders), clientId, page, status)
}

// LikeBillboard mocks base method.
func (m *MockService) LikeBillboard(clientId, productId int, action string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LikeBillboard", clientId, productId, action)
	ret0, _ := ret[0].(error)
	return ret0
}

// LikeBillboard indicates an expected call of LikeBillboard.
func (mr *MockServiceMockRecorder) LikeBillboard(clientId, productId, action interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LikeBillboard", reflect.TypeOf((*MockService)(nil).LikeBillboard), clientId, productId, action)
}

// ParseToken mocks base method.
func (m *MockService) ParseToken(accessToken string) (int, []models.RolesHeaders, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseToken", accessToken)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].([]models.RolesHeaders)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ParseToken indicates an expected call of ParseToken.
func (mr *MockServiceMockRecorder) ParseToken(accessToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseToken", reflect.TypeOf((*MockService)(nil).ParseToken), accessToken)
}

// UpdateBillboard mocks base method.
func (m *MockService) UpdateBillboard(id int, input models.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBillboard", id, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBillboard indicates an expected call of UpdateBillboard.
func (mr *MockServiceMockRecorder) UpdateBillboard(id, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBillboard", reflect.TypeOf((*MockService)(nil).UpdateBillboard), id, input)
}

// UpdateMyProfile mocks base method.
func (m *MockService) UpdateMyProfile(userId int, input dtos.UpdateUser) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMyProfile", userId, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMyProfile indicates an expected call of UpdateMyProfile.
func (mr *MockServiceMockRecorder) UpdateMyProfile(userId, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMyProfile", reflect.TypeOf((*MockService)(nil).UpdateMyProfile), userId, input)
}
